

Smart pointers cheat sheet
--------------------------



Smart pointers:
    - unique pointers (unique_ptr)
    - shared pointers (shared_ptr)
    - weak pointers (weak_ptr)
    - auto pointers (auto_ptr) <- depricated!

Smart pointers 
    - are objects
    - implemented as template classes, which can be instantiated
    - can only point to heap allocated memory
    - automatically call delete when no longer needed
    - adhere to RAII principles ( Resource Aquisition Is Initialization = destructor automatically called when out of scope)
    - are wrappers around a raw pointer
    - offer overloaded operators 
        > dereference (*)
        > member selection ( ->)
        > pointer arithmetic not supported!
    - can have custom deleters

!Must #include <memory>


1. unique pointers - unique_ptr<T>
    - points to an object of type T on the Heap
    - it is unique - there can only be one unique_ptr<T> pointing to the same object on the Heap
    - owns what it points to
    - cannot be assigned or copied
    - CAN be moved
    - when the pointer is destroyed, what it points to is automatically destroyed

    {
        std::unique_ptr<int> p1 {new int {100}};
        std::cout<<*p1<<std::endl; //100
        *p1 = 200;
        std::cout<<*p1<<std::endl; //200
    } //automatically deleted

    - offers some useful methods:
        > std::cout<<p1.get()<<std::endl; //gets the memory address where it is stored
        > pt.reset(); // p1 is not nullptr
    --> std::unique_ptr<int> p1 = make_unique<int> (100); // more efficient - no calls to new or delete


2. shared pointers - shared_ptr<T>
    - provides shared ownership of heap objects
    - points to an object of type T on the heap
    - is not unique - there can be many shared_ptr pointing to the same object on the heap
    - establishes shared ownership Relationship
    - can be assigned and copied
    - can be moved
    - doesn't support managing arrays by default
    - when the use count is zero, the managed object on the heap is destroyed

    {
        std::shared_ptr<int> p1 {new int {100}};
        std::cout<<*p1<<std::end; /100
        std::cout<<p1.use_count()<<std::endl; //1
        std::shared_ptr<int> p2 {p1}; //shared ownership
        std::cout<<p1.use_count()<<std::endl; //2
        p1.reset();
        std::cout<<p1.use_count()<<std::endl; //0
        std::cout<<p2.use_count()<<std::endl; //1
    } //automatically deleted

    --> std::shared_ptr<int> p1 = std::make_shared<int> (100); //use_count 1
        std::shared_ptr<int> p2 {p1}; //use_count 2


3. weak pointers - weak_ptr<T>
    - provides a non-owning "weak" reference
    - points to an object of type T on the heap
    - does not participate in an owning Relationship
    - Always created from a shared_ptr
    - does not increment or decrement reference use count
    - used to prevent strong reference cycles which could prevent objects from being deleted
    - used for iterary pointers ( traversing a vector)